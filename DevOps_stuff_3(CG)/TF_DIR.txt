TF DIR

📁 Terraform Directory Structure (with Multiple Workspaces)

terraform-project/
│
├── main.tf                  # Main configuration file (resources, modules, etc.)
├── variables.tf             # Input variable definitions
├── outputs.tf               # Output values
├── terraform.tfvars         # Actual values for variables
├── provider.tf              # Provider configuration (e.g., AWS, Azure)
├── versions.tf              # Required Terraform and provider versions
├── backend.tf               # Remote backend configuration (optional)
│
├── .terraform/              # Auto-generated plugin/module cache
│   ├── providers/           # Downloaded provider binaries
│   └── modules/             # Cached modules
│
├── .terraform.lock.hcl      # Provider dependency lock file(exact versions, provider checksums, provider information)
│                             # Manage external provider dependencies within the terraform configuration, 
│                               ensures consistent provider versions across all environments and terraform operations 
│
├── terraform.tfstate        # Default workspace state file (if using local backend)
├── terraform.tfstate.backup # Backup of previous state
│
├── terraform.tfstate.d/     # Workspace-specific state files (for CLI workspaces)
│   ├── dev/
│   │   └── terraform.tfstate
│   ├── staging/
│   │   └── terraform.tfstate
│   └── prod/
│       └── terraform.tfstate
│
├── modules/                 # Reusable custom modules
│   └── <module-name>/       # Each module has its own *.tf files
│
├── environments/            # Optional: separate folders for environment-specific configs
│   ├── dev/
│   ├── staging/
│   └── prod/
│
└── README.md                # Project documentation

Alias for provider:

terraform {
  required_providers {
    aws_p = {
      source  = "hashicorp/aws"
      version = "~> 3.0"
    }
  }
}

provider "aws_p" {
  alias  = "custom"
  region = "us-west-2"
}

resource "aws_instance" "example" { #the resource type name like aws_instance does not change, even if you use an alias for the provider
  provider      = aws_p.custom
  ami           = "ami-0123456789abcdef0"
  instance_type = "t2.micro"
}

#Terraform resource types are always prefixed with the official provider name, not your alias.

