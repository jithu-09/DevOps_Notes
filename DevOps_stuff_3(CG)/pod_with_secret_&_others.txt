pod with secret:

apiVersion: v1
kind: Pod
metadata:
  name: secret-datacenter
spec:
  containers:
  - name: secret-container-datacenter
    image: ubuntu:latest
    command: ["sleep", "3600"]  # Keeps the container running for debugging
    ports:
    - containerPort: 80
    volumeMounts:
      - name: blog-secret-volume
        mountPath: "/opt/cluster"
        readOnly: true
  volumes:
    - name: blog-secret-volume
      secret:
        secretName: blog


pod with env, cmd, args:

apiVersion: v1
kind: Pod
metadata:
  name: envars
spec:
  containers:
  - name: fieldref-container
    image: nginx:latest
    command: ['sh', '-c']  
    args: 
      - |
        while true; do 
          echo -e '\n'; # '/n' should be '\n' (newline). 
          printenv NODE_NAME POD_NAME POD_IP POD_SERVICE_ACCOUNT; # only one printenv per line 
          sleep 10; 
        done;

    env:
    - name: NODE_NAME
      valueFrom:
        fieldRef:
          fieldPath: spec.nodeName
    - name: POD_NAME
      valueFrom:
        fieldRef:
          fieldPath: metadata.name
    - name: POD_IP
      valueFrom:
        fieldRef:
          fieldPath: status.podIP
    - name: POD_SERVICE_ACCOUNT
      valueFrom:
        fieldRef:
          fieldPath: spec.serviceAccountName
  restartPolicy: Never  

pod with side car container and volume mounts:

apiVersion: v1
kind: Pod
metadata:
  name: webserver
spec:
  containers:
  - name: nginx-container
    image: nginx:latest
    volumeMounts:
    - name: shared-logs
      mountPath: /var/log/nginx
  - name: sidecar-container
    image: ubuntu:latest
    command: ["sh","-c","while true; do cat /var/log/nginx/access.log /var/log/nginx/error.log; sleep 30; done"]
    volumeMounts:
    - name: shared-logs
      mountPath: /var/log/nginx
  volumes:
  - name: shared-logs
    emptyDir: {} 

deployment with rplling stratergy:

apiVersion: apps/v1
kind: Deployment
metadata:
  name: httpd-deploy
  namespace: datacenter
  labels:
    app: httpd
spec:
  replicas: 4
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 2
  selector:
    matchLabels:
      app: httpd
  template:
    metadata:
      labels:
        app: httpd
    spec:
      containers:
      - name: httpd
        image: httpd:2.4.43
        ports:
        - containerPort: 80


cmd to do rolling update: kubectl set image deployment/httpd-deploy httpd=httpd:2.4.43 -n datacenter

set image: Updates the container image in the Deployment.
deployment/httpd-deploy: Specifies the Deployment name.
httpd=httpd:2.4.43: Sets the container named httpd to use the new image.
-n datacenter: Targets the correct namespace.

check status:

kubectl rollout status deployment/httpd-deploy -n datacentre

undo rollout:

kubectl rollout undo deployment/httpd-deploy -n datacenter